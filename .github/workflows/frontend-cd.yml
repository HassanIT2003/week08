# week08/.github/workflows/frontend-cd.yml

name: CD - Deploy Frontend to AKS

on:
  # Manual trigger with inputs so you can paste the backend IPs
  workflow_dispatch:
    inputs:
      product_api_ip:
        description: 'External URL of Product API (e.g., http://X.X.X.X:8000)'
        required: true
        default: 'http://<ip_address>:8000'
      order_api_ip:
        description: 'External URL of Order API (e.g., http://Y.Y.Y.Y:8001)'
        required: true
        default: 'http://<ip_address>:8001'
      aks_cluster_name:
        description: 'AKS cluster name'
        required: true
        default: 'aks-sit722-w08'
      aks_resource_group:
        description: 'AKS resource group'
        required: true
        default: 'rg-sit722-w08'

env:
  # Short and long ACR identifiers
  ACR_NAME: sit722w089391
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
  deploy_frontend:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Use AKS context
      - name: Set AKS context
        run: az aks get-credentials --resource-group "${{ inputs.aks_resource_group }}" --name "${{ inputs.aks_cluster_name }}" --overwrite-existing

      # Optional but safe (noop if already attached)
      - name: Ensure AKS can pull from ACR
        run: az aks update --resource-group "${{ inputs.aks_resource_group }}" --name "${{ inputs.aks_cluster_name }}" --attach-acr "${{ env.ACR_NAME }}"

      # (A) If your frontend/main.js has placeholders _PRODUCT_API_URL_ and _ORDER_API_URL_
      - name: Inject Backend URLs into frontend/main.js
        run: |
          sed -i "s|_PRODUCT_API_URL_|${{ inputs.product_api_ip }}|g" frontend/main.js || true
          sed -i "s|_ORDER_API_URL_|${{ inputs.order_api_ip }}|g"     frontend/main.js || true
          echo "=== main.js (preview) ==="
          sed -n '1,60p' frontend/main.js || true

      # Build & push the frontend image
      - name: Login to ACR (short name)
        run: az acr login --name ${{ env.ACR_NAME }}

      - name: Build and Push Frontend Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:latest ./frontend
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:latest

      # Deploy to AKS
      - name: Deploy Frontend manifests
        run: |
          # Apply manifest(s)
          kubectl apply -f k8s/frontend.yaml
          # If your manifest doesn't already use your ACR image, patch it:
          # kubectl set image deployment/frontend-deployment frontend-container=${{ env.ACR_LOGIN_SERVER }}/frontend:latest
          kubectl rollout status deployment/frontend-deployment --timeout=180s || true

      - name: Show services & pods
        run: |
          kubectl get pods -o wide
          kubectl get svc  -o wide

      - name: Logout from Azure
        if: always()
        run: az logout
